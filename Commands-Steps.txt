HOW TO USE MULTIPLE AUTHENTICATION GUARDS IN A LARAVEL APP

August 22nd, 2018
You will need PHP 7+, Laravel 5.6+, Composer and Laravel installer. Some knowledge of PHP and Laravel will be helpful.
If you have used Laravel for a while, you should have heard a lot about multiple authentications. You should have also heard “guards” a whole lot. But if you are fairly new to Laravel, multiple authentications makes it possible for you to have different classes of users access different/similar parts of the same application.

There are many reasons why you may want to use multiple authentications in your Laravel application. For example, you have a large application that runs an entire company. Customers also interact with the product and services of the company through the same application. The application also has a blog and there is a department in the company responsible for handling the blog.

We can see from the application above that there are already three sets of users. For customers, we can have them use a certain authentication process to access the system. For customersrs, they could have a totally different authentication process and even have roles to enable a more robust content management process. For the rest of the company, you can have different roles representing different functions.

Now, let us look at how to create multiple authentications for our different class of users.

Prerequisites
Knowledge of PHP (version >= 7.1.3).
Knowledge of Laravel (version 5.6.x).
Composer is installed on your computer (version >= 1.3.2).
Laravel installer is installed on your computer.

Getting started
If you checked off all the items on the prerequisites list, then this tutorial is already looking solid for you. We will create a Laravel app that has three user classes — admin, customer, user. We will make guards for the three user classes and restrict different parts of our application based on those guards.

Create the application
We need to create a new Laravel application. Run the following command on your terminal to create a new Laravel application:

    $ laravel new multi-auth
    $ cd multi-auth
    You will need PHP 7+, Laravel 5.6+, Composer and Laravel installer. Some knowledge of PHP and Laravel will be helpful.
    If you have used Laravel for a while, you should have heard a lot about multiple authentications. You should have also heard “guards” a whole lot. But if you are fairly new to Laravel, multiple authentications makes it possible for you to have different classes of users access different/similar parts of the same application.

    There are many reasons why you may want to use multiple authentications in your Laravel application. For example, you have a large application that runs an entire company. Customers also interact with the product and services of the company through the same application. The application also has a blog and there is a department in the company responsible for handling the blog.

    We can see from the application above that there are already three sets of users. For customers, we can have them use a certain authentication process to access the system. For customerss, they could have a totally different authentication process and even have roles to enable a more robust content management process. For the rest of the company, you can have different roles representing different functions.

    Now, let us look at how to create multiple authentications for our different class of users.

    Prerequisites
    Knowledge of PHP (version >= 7.1.3).
    Knowledge of Laravel (version 5.6.x).
    Composer is installed on your computer (version >= 1.3.2).
    Laravel installer is installed on your computer.
    Getting started
    If you checked off all the items on the prerequisites list, then this tutorial is already looking solid for you.
    We will create a Laravel app that has three user classes — admin, customer, user.
    We will make guards for the three user classes and restrict different parts of our application based on those guards.

    Create the application
    We need to create a new Laravel application. Run the following command on your terminal to create a new Laravel application:

        $ laravel new multi-auth
        $ cd multi-auth

*****Create the database
    We will use SQLite database for our application. It is lightweight, fast and uses a simple flat file.
     Create a database file with the following command:

        $ touch database/database.sqlite
    Open the .env file in your application directory and change the following section:

        DB_CONNECTION=mysql
        DB_HOST=127.0.0.1
        DB_PORT=3306
        DB_DATABASE=homestead
        DB_USERNAME=homestead
        DB_PASSWORD=secret
    To:

        DB_CONNECTION=/absolute/path/to/database.sqlite
    This will ensure our application uses the SQLite driver for database connections.

#1 --------------------------
Creating migrations
We will make migrations for the admins and customers tables as Laravel comes with a users migration.
They will be as simple as the users table, but you can extend them further based on your specific needs.

*****Create migration for admins
    To make the admins table, run the following command:

        $ php artisan make:migration create_admins_table
    From the database/migrations directory, open the admins migrations file and edit it as follows:
    // database/migrations/<timestamp>_create_admins_table.php

        [...]
        public function up()
        {
            Schema::create('admins', function (Blueprint $table) {
                $table->increments('id');
                $table->string('name');
                $table->string('email')->unique();
                $table->string('password');
                $table->boolean('is_super')->default(false);
                $table->rememberToken();
                $table->timestamps();
            });
        }
        [...]
    We have created a simple migration and defined the columns we want the admin table to have.
    Eloquent provides methods that represent datatypes of our database table. We use them to define
    the datatypes of our table columns.

*****Create migration for customers
     To make the customers table, run the following command:

         $ php artisan make:migration create_customers_table
     Now, open the customers migrations file and edit it as follows:

         database/migrations/<timestamp>_create_customers_table.php
         [...]
         public function up()
         {
             Schema::create('customers', function (Blueprint $table) {
                 $table->increments('id');
                 $table->string('name');
                 $table->string('email')->unique();
                 $table->string('password');
                 $table->boolean('is_editor')->default(false);
                 $table->rememberToken();
                 $table->timestamps();
             });
         }
         [...]
     We just created a simple migration and defined the columns we want the customers table to have.
     Eloquent provides methods that represent datatypes of our database table, so it is easy to decide what
     we want each one to be.

*****Migrate the database
     Now that we have defined our tables, let us migrate the database:

         $ php artisan migrate

#2 --------------------------
Set up the models

    We have different classes of users for our application, and they use different database tables.
    To use these different tables for authentication, we have to define models for them.
    These models will be like the user model and extends the Authenticable class.

*****Admin model
    To make the model for the admins, run the following command:

        $ php artisan make:model Admin

    Open the Admin model in app/Admin.php and add the following:

        // app/Admin.php
        <?php

        namespace App;

        use Illuminate\Notifications\Notifiable;
        use Illuminate\Foundation\Auth\User as Authenticatable;

        class Admin extends Authenticatable
        {
            use Notifiable;

            protected $guard = 'admin';

            protected $fillable = [
                'name', 'email', 'password',
            ];

            protected $hidden = [
                'password', 'remember_token',
            ];
        }

        When you intend to use a model for authentication, and you plan to not use the default user guard, it is important you specify the guard it will use. In our case, it will use the admin guard.

        We also defined some of our database columns as fillable by putting them in the fillable array. This tells Laravel the following about the model:

        When I call your create or update method and I pass you an array, take only these items (read: items in the fillable array).

        This way, we will prevent a scenario where a user can bypass any of our checks and insert or update a record we do not wish for them to update.

        For the hidden array, we tell Laravel not to return those columns when we return the model to either our API or view.

*****Customerss model
     To make the model for the customers, run the following command:

         $ php artisan make:model Customer
     Then open the Customer model and replace with the following:

         // app/Customer.php
         <?php

         namespace App;

         use Illuminate\Notifications\Notifiable;
         use Illuminate\Foundation\Auth\User as Authenticatable;

         class Customer extends Authenticatable
         {
             use Notifiable;

             protected $guard = 'customer';

             protected $fillable = [
                 'name', 'email', 'password',
             ];

             protected $hidden = [
                 'password', 'remember_token',
             ];
         }

#3 --------------------------
Define the guards
    Laravel guards define how users are authenticated for each request.
    Laravel comes with some guards for authentication,
    but we can also create ours as well. This will enable us to use Laravel’s default authentication
    system with our Admin and Customer models as well.

    Open config/auth.php and add the new guards edit as follows:
    // config/auth.php

        <?php

        [...]
        'guards' => [
            [...]
            'admin' => [
                'driver' => 'session',
                'provider' => 'admins',
            ],
            'customer' => [
                'driver' => 'session',
                'provider' => 'customers',
            ],
        ],
        [...]

        We added two new guards admin and customer and set their providers. These providers tell Laravel what to use
        for authentication or validation when we try to use the guard.

        Now, add the following to the providers array:

         // config/auth.php

            [...]
            'providers' => [
                [...]
                'admins' => [
                    'driver' => 'eloquent',
                    'model' => App\Admin::class,
                ],
                'customers' => [
                    'driver' => 'eloquent',
                    'model' => App\Customer::class,
                ],
            ],
            [...]
         Now, we have set up the providers we defined along with the guards above. We set the driver to be
         eloquent since we are using Eloquent ORM as our database manager.

         Let’s say we wish to use another ORM like RedBeanPHP for managing our database, we can then set the driver
         to say redbeanphp instead of eloquent. For the model, we pass the model we want that provider to use.

#4 --------------------------
Set up the controllers
    To use our guards for authentication, we can either modify the existing authentication controllers or create new ones.
    You can choose which to use based on your specific needs.
    In this tutorial, we will modify these controllers.
    inite default controllers:
     {
        Laravel UI
        Laravel UI is a new first-party package that extracts the UI portion of a Laravel project into a separate laravel/ui package.
        The separate package enables the Laravel team to iterate on the UI package separately from the main Laravel codebase.

        You can install the laravel/ui package via composer using the following command:

            $ composer require laravel/ui

        Once you’ve installed laravel/ui you have a couple of commands available to generate UI code, including authorization.

        If you intend to use Vue, React, or Bootstrap, the UI package provides the following command:

            $ php artisan ui --help

           $ php artisan ui bootstrap --auth
           $ php artisan ui react --auth
           $ php artisan ui vue --auth

           Please run "npm install && npm run dev" to compile your fresh scaffolding
     }

*****Modify LoginController
     Open the LoginController in app/Http/Controllers/Auth and edit as follows:

         // app/Http/Controllers/Auth/LoginController.php

         <?php

         namespace App\Http\Controllers\Auth;

         use App\Http\Controllers\Controller;
         use Illuminate\Foundation\Auth\AuthenticatesUsers;
         [...]
         use Illuminate\Http\Request;
         use Auth;
         [...]
         class LoginController extends Controller
         {
             [...]
             public function __construct()
             {
                 $this->middleware('guest')->except('logout');
                 $this->middleware('guest:admin')->except('logout');
                 $this->middleware('guest:customer')->except('logout');
             }
             [...]
         }
    We set the middleware to restrict access to this controller or its methods. It is important we defined all the different types of guests in the controller. This way, if one type of user is logged in and you try to use another user type to log in, it will redirect you to a predefined authentication page.

    See it this way: If I log in on my computer as an administrator, and my colleague who is a customer also tries to log into his account as a customer, he will not be able to.

    This check is important, so we do not mess up session information and potentially corrupt our application data.
    ------------------------------------
    Now, define the login for admins:
    // app/Http/Controllers/Auth/LoginController.php

        [...]
        public function showAdminLoginForm()
        {
            return view('auth.login', ['url' => 'admin']);
        }

        public function adminLogin(Request $request)
        {
            $this->validate($request, [
                'email'   => 'required|email',
                'password' => 'required|min:6'
            ]);

            if (Auth::guard('admin')->attempt(['email' => $request->email, 'password' => $request->password], $request->get('remember'))) {

                return redirect()->intended('/admin');
            }
            return back()->withInput($request->only('email', 'remember'));
        }
        [...]

        We have set up a method to return the login page for an admin. We will use the same page for all the user types and only change the URL they get sent to. Saves us a lot of code we could avoid writing.

        We also defined the adminLogin method which checks that the right credentials are supplied. Then we attempt to log a user in with the admin guard. It is important we set this guard when attempting a login so that the Auth facade will check the right table matching credentials. It will also set up our authentication so we can restrict pages based on the type of user who is logged in.

        We redirect an authenticated user to a specific URL and send an unauthenticated user back to the login page.

    ------------------------------------

        Now, let us do the same thing but for the customers:

            // app/Http/Controllers/Auth/LoginController.php


            [...]
            public function showCustomerLoginForm()
            {
                return view('auth.login', ['url' => 'customer']);
            }

            public function customerLogin(Request $request)
            {
                $this->validate($request, [
                    'email'   => 'required|email',
                    'password' => 'required|min:6'
                ]);

                if (Auth::guard('customer')->attempt(['email' => $request->email, 'password' => $request->password], $request->get('remember'))) {

                    return redirect()->intended('/customer');
                }
                return back()->withInput($request->only('email', 'remember'));
            }
            [...]
        And our login is set. Hurray!!!


#5 --------------------------
